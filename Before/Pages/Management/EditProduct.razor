@page "/editproduct/{Id:int}"
@inject BlazorService BlazorService
@inject NavigationManager NavigationManager
@inject HttpClient ServerHttpClient
@inject IProduct ProductService

<h3>Редактировать товар</h3>

<EditForm Model="@product" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Название:</label>
        <InputText id="name" @bind-Value="product.Name" class="input-control" />
    </div>

    <div class="form-group">
        <label for="description">Описание:</label>
        <InputTextArea id="description" @bind-Value="product.Description" class="input-control" />
    </div>

    <div class="form-group">
        <label for="price">Цена:</label>
        <InputNumber id="price" @bind-Value="product.Price" class="input-number" />
    </div>

    <div class="form-group">
        <label for="action">Акция:</label>
        <InputNumber id="action" @bind-Value="product.Action" class="input-number" />
    </div>

    <div class="form-group">
        <label for="IMG">IMG:</label>
        <ImageManagement Id="product.Id" />
    </div>

    <div class="form-group">
        <label for="categoryId">Категория:</label>
        <InputSelect id="categoryId" @bind-Value="product.CategoryId" class="input-select" @key="BlazorService.Categories">
            @foreach (var category in BlazorService.Categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="sellerId">Продавец:</label>
        <InputSelect id="sellerId" @bind-Value="product.SellerId" class="input-select" @key="BlazorService.Sellers">
            @foreach (var seller in BlazorService.Sellers)
            {
                <option value="@seller.Id">@seller.Name</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="typeItemId">Тип товара:</label>
        <InputSelect id="typeItemId" @bind-Value="product.TypeItemId" class="input-select" @key="BlazorService.TypeItems">
            @foreach (var typeItem in BlazorService.TypeItems)
            {
                <option value="@typeItem.Id">@typeItem.Name</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label>Сезон</label>
        <ul>
            @foreach (var season in originalProduct.Seasons)
            {
                <li>
                    @season.Season.Name
                    <button type="button" class="btn btn-danger" @onclick="() => RemoveSeason(season)">Удалить</button>
                </li>
            }
        </ul>
    </div>

    <div class="form-group">
        <label>Размеры:</label>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Размер</th>
                    <th>Цвет</th>
                    <th>Количество</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var size in originalProduct.Sizes)
                {
                    <tr>
                        <td>@size.Size.Name</td>
                        <td>
                            <div class="color-sample" style="background-color: @size.Color.Name"></div>
                            <span>@size.Color.Name</span>
                        </td>
                        <td>@size.Count</td>
                        <td><button type="button" class="btn btn-danger" @onclick="() => RemoveSize(size)">Удалить</button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>


    <button type="submit" class="btn btn-primary">Сохранить изменения</button>
</EditForm>

@code {
    [Parameter] public int Id { get; set; }
    private Product product;
    private Product originalProduct;

    protected override async Task OnInitializedAsync()
    {
        originalProduct = BlazorService.GetItemById(Id);
        product = new Product
            {
                Id = originalProduct.Id,
                Name = originalProduct.Name,
                Description = originalProduct.Description,
                Price = originalProduct.Price,
                Action = originalProduct.Action,
                CategoryId = originalProduct.CategoryId,
                SellerId = originalProduct.SellerId,
                TypeItemId = originalProduct.TypeItemId,
                Category = originalProduct.Category,
                Seller = originalProduct.Seller,
                TypeItem = originalProduct.TypeItem,
                Seasons = originalProduct.Seasons,
                Sizes = originalProduct.Sizes
            };
    }

    private async Task HandleValidSubmit()
    {
        product.Category = BlazorService.Categories.FirstOrDefault(c => c.Id == product.CategoryId);
        product.Seller = BlazorService.Sellers.FirstOrDefault(s => s.Id == product.SellerId);
        product.TypeItem = BlazorService.TypeItems.FirstOrDefault(t => t.Id == product.TypeItemId);


        await ProductService.UpdateProductAsync(product);
        BlazorService.Changer();
        NavigationManager.NavigateTo("/ControlPanel");
    }

    private async Task RemoveSize(SizeModel size)
    {
        product.Sizes.Remove(size);
        await ProductService.UpdateProductAsync(originalProduct);
    }
    private async Task RemoveSeason(SeasonModel season)
    {
        product.Seasons.Remove(season);
        await ProductService.UpdateProductAsync(originalProduct);
    }
    
}
